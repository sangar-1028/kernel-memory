{
  "SemanticMemory": {
    // =====================
    // ====== Search =======
    // =====================
    "Search": {
      // Which vector storage to use when searching for embeddings
      // Note: the index/collection names must match the name of the embedding generator
      // used to write the embeddings. Changing generator or changing vector DB can result
      // in errors, e.g. the code not finding the embeddings at the expected location.
      "VectorDb": {
        // "Type": "AzureCognitiveSearch" or "Qdrant",
        //
        // For Azure Cognitive Search:
        //   "Type": "AzureCognitiveSearch",
        //   "Endpoint": "https://<...>",
        //   "APIKey": "",
        //
        // For Qdrant:
        //   "Type": "Qdrant",
        //   "Endpoint": "https://<...>",
        //   "APIKey": "",
        // },
      },
      // Which embedding generator to use to:
      // - generate embedding for the give questions
      // - identify the name of the index to search (indexes have a specific name and vector size)
      "EmbeddingGenerator": {
        // "Type": "AzureOpenAI" or "OpenAI", // This value is used also to locate the correct index names in the Vector DB
        //
        // For Azure OpenAI:
        //   "Type": "AzureOpenAI",
        //   "Endpoint": "https://<...>.openai.azure.com/",
        //   "Deployment": "", // This value is used also to locate the correct index names in the Vector DB
        //   "APIKey": "",
        //
        // For OpenAI:
        //   "Type": "OpenAI",
        //   "Model": "text-embedding-ada-002", // This value is used also to locate the correct index names in the Vector DB
        //   "APIKey": "",
        //   "OrgId": "",
      },
      // Which LLM to use to run prompts and generate answers, e.g. gpt-4, gpt-3.5-turbo-16k, etc.
      "TextGenerator": {
        // "Type": "AzureOpenAI" or "OpenAI",
        //
        // For Azure OpenAI:
        //   "Type": "AzureOpenAI",
        //   "Endpoint": "https://<...>.openai.azure.com/",
        //   "Deployment": "",
        //   "APIKey": "",
        //
        // For OpenAI:
        //   "Type": "OpenAI",
        //   "Model": "text-embedding-ada-002",
        //   "APIKey": "",
        //   "OrgId": "",
      }
    },
    // =====================
    // ====== Content ======
    // =====================
    "ContentStorage": {
      "Type": "FileSystem",
      "FileSystem": {
        // local folder, e.g. under ./bin/Debug
        "Directory": "./test"
      },
    },
    // ===========================
    // ====== Orchestration ======
    // ===========================
    "Orchestration": {
      "Type": "InProcess"
    },
    // ===============================
    // ====== Pipeline Handlers ======
    // ===============================
    "Handlers": {
      "extract": {
        // Custom key-values
      },
      "partition": {
        // Custom key-values
      },
      "gen_embeddings": {
        // Which generators to use, for each text partition/chunk. Normally only one generator is active.
        // Having multiple active generators allows to create more advanced setups e.g. comparing embedding
        // types, combining searches, etc. Currently only one value is supported.
        "EmbeddingGenerators": [
          // {
          //   "Type": "AzureOpenAI",
          //   "Endpoint": "https://<...>.openai.azure.com/",
          //   "Deployment": "",
          //   "APIKey": "",
          // },
          // {
          //   "Type": "OpenAI",
          //   "Model": "text-embedding-ada-002",
          //   "APIKey": "",
          //   "OrgId": "",
          // },
          // {
          //   Not supported yet
          //   "Type": "SentenceTransformers",
          //   "Model": "all-MiniLM-L6-v2",
          // },
        ],
      },
      "save_embeddings": {
        "VectorDbs": [
          // {
          //   "Type": "AzureCognitiveSearch",
          //   "Endpoint": "https://<...>",
          //   "APIKey": "",
          // },
          // {
          //   "Type": "Qdrant",
          //   "Endpoint": "https://<...>",
          //   "APIKey": "",
          // },
        ],
      },
    },
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}
